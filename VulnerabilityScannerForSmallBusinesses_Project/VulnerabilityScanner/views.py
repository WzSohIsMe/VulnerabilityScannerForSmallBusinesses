from django.shortcuts import render
from django.shortcuts import redirect
import socket
import platform
import nmap
import json
import csv

# Create your views here.
def getLocalIp():
    #Retrive Private IPV4 Address
    s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    try:
        s.connect(('192.255.255.255',1))
        IP = s.getsockname()[0]
    except:
        IP='127.0.0.1'
    finally:
        s.close()
    return IP


def scanOpenedPorts():
    #Scan Targeted Opened Ports

    # Create Nmap Object
    nm = nmap.PortScanner()

    # Set the port range
    portRange = '0-65535'#65535

    # Create a json file to store the scanned result
    with open('scannedResults.json','w') as outputFile:
        outputFile.write(json.dumps(nm.scan(getLocalIp(),portRange),indent=4))

    # Start scanning and append the result to scannedResult list
    for host in nm.all_hosts():
        scannedResult=[]
        for proto in nm[host].all_protocols():
            lport = nm[host][proto].keys()
            sorted(lport)
            for port in lport:
                scannedResult.append({"Port":port,"State":(nm[host][proto][port]['state']),"Name":(nm[host][proto][port]['name'])})   

    # Return scanned result list
    return [scannedResult,len(scannedResult),portRange]


# home.html view
def home(request):
    # Request Host Machine Ip Address
    targetedIPAddress = getLocalIp()

    # Request device operating System
    deviceOS = platform.system()

    # Return Ip Address and device operating system
    return render(request, 'home.html',{'targetedIPAddress':targetedIPAddress,'deviceOS':deviceOS})

# result.html view
def result(request):
    if request.GET.get('ScanPorts') == "":
        # Call scanning function and store the returned scanned result
        scannedResults = scanOpenedPorts()
        ipAddress = getLocalIp()
        deviceOS = platform.system()

        # return scannedresults list, Ip Address and device operating system
        return render(request,'result.html',
        {
            "scannedResults":scannedResults[0],
            "numPorts":range(scannedResults[1]),
            'ipAddress':ipAddress,
            'deviceOS':deviceOS,
            "totalOpenFilterPorts":scannedResults[1],
            "portRange":scannedResults[2]
        })    

# viewResult.html
def viewResult(request):
    if request.GET.get('ViewResult') =="":
        # Request Host Machine Ip Address
        ipAddress = getLocalIp()

        # Request device operating System
        deviceOS = platform.system()
        try:
            scannedResults = []
            # Open created Json file
            with open('scannedResults.json','r') as jsonFile:
                # Store items into variables
                scannedJson = json.load(jsonFile)
                scannedIPAddress = scannedJson['scan'][ipAddress]['addresses']['ipv4']
                scannedPorts = scannedJson['scan'][ipAddress]['tcp']
                scannedTotalPortsRange = scannedJson['nmap']['scaninfo']['tcp']['services']
                scannedTimeStamp = scannedJson['nmap']['scanstats']['timestr']
                scannedTimeUsed =  scannedJson['nmap']['scanstats']['elapsed']
                sorted(scannedPorts)
                for port, port_info in scannedPorts.items():
                    port_number = int(port)
                    port_state = port_info.get('state')
                    port_name = port_info.get('name')
                    
                    scannedResults.append({"Port":port_number,"State":port_state,"Name":port_name})   

                # Return variables for displaying purposes
                return render(request, 'viewResult.html',
                {
                    "scannedResults":scannedResults,
                    "numPorts":range(len(scannedResults)),
                    "ipAddress":scannedIPAddress,
                    "deviceOS":deviceOS,
                    "totalOpenFilterPorts":len(scannedPorts),
                    "scannedTimeStamp":scannedTimeStamp,
                    "scannedTimeUsed":scannedTimeUsed,
                    "scannedTotalPortsRange":scannedTotalPortsRange
                })
        except:
            # If there is no Json file OR with wrong IP Address, users will be redirect to the home.html
            return redirect(request.META.get('HTTP_REFERER', 'redirect_if_referer_not_found'))

        


# Return device's hostname
def getHostname(ipAddress):
    try:
        hostname = socket.gethostbyaddr(ipAddress)[0]
        return hostname
    except socket.herror:
        return "device"



# Reading Database and Return a list of executive information list
def readingDatabse(scannedResults):
    executiveReportList = []
    # Open port database
    with open('portDatabase.csv','r',encoding="utf-8") as databaseFile:
        databaseList = list(csv.reader(databaseFile,delimiter=','))
        databaseFile.close()

        # Check whether if the scanned port in scanned result list is found in the port database
        for port in scannedResults:
            targetPort = port["Port"]
            
            for databasePort in databaseList:
                # if the port is found, executive report list will be appended with the port
                if (int(databasePort[0])==targetPort):
                    executiveReportList.append(databasePort)
                    break
            else:
                pass
        # After appending, return the executive report list
    return executiveReportList


# View Report
def viewReport(request):
    if request.GET.get('CreateReport') == "":
        scannedResults = []
        
        # Request Ip Address
        ipAddress = getLocalIp()
        
        # Request device operating System
        deviceOS = platform.system()
        try:
            with open('scannedResults.json','r') as jsonFile:
                # Store items into variables
                scannedJson = json.load(jsonFile)
                scannedIPAddress = scannedJson['scan'][ipAddress]['addresses']['ipv4']
                scannedPorts = scannedJson['scan'][ipAddress]['tcp']
                scannedTotalPortsRange = scannedJson['nmap']['scaninfo']['tcp']['services']
                scannedTimeStamp = scannedJson['nmap']['scanstats']['timestr']
                scannedTimeUsed =  scannedJson['nmap']['scanstats']['elapsed']
                sorted(scannedPorts)
                for port, port_info in scannedPorts.items():
                    port_number = int(port)
                    port_state = port_info.get('state')
                    port_name = port_info.get('name')
                    
                    scannedResults.append(
                        {
                            "Port":port_number,
                            "State":port_state,
                            "Name":port_name
                        })   
            
            # Call reading database to scan ports in database and store the list to executiveReportList

            # Get Hostname
            executiveReportList = readingDatabse(scannedResults)
            deviceHostname = getHostname(ipAddress=ipAddress)
            
            # Return variables for displaying purposes
            return render(request, "viewReport.html",
            {
                "rangeTotalVulnerabilities":range(len(executiveReportList)),
                "totalVulnerabilities":len(executiveReportList),
                "deviceHostname":deviceHostname,
                "executiveReportList":executiveReportList,
                "scannedResults":scannedResults,
                "numPorts":range(len(scannedResults)),
                "ipAddress":scannedIPAddress,
                "deviceOS":deviceOS,
                "totalOpenFilterPorts":len(scannedPorts),
                "scannedTimeStamp":scannedTimeStamp,
                "scannedTimeUsed":scannedTimeUsed,
                "scannedTotalPortsRange":scannedTotalPortsRange
                })
        except:

            # If there is no Json file OR with wrong IP Address, users will be redirect to the home.html
            return redirect(request.META.get('HTTP_REFERER', 'redirect_if_referer_not_found'))