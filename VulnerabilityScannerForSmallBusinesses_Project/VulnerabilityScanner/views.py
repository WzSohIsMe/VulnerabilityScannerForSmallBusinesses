from django.shortcuts import render
import socket
import platform
import nmap
# from django.http import HttpResponse
# from django.template import loader
import json
import csv
# Create your views here.
def getLocalIp():
    #Retrive Private IPV4 Address
    s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    try:
        s.connect(('192.255.255.255',1))
        IP = s.getsockname()[0]
    except:
        IP='127.0.0.1'
    finally:
        s.close()
    return IP

def scanOpenedPorts():
    #Scan Targeted Opened Ports
    nm = nmap.PortScanner()
    portRange = '0-65535'#65535
    with open('scannedResults.json','w') as outputFile:
        outputFile.write(json.dumps(nm.scan(getLocalIp(),portRange),indent=4))

    for host in nm.all_hosts():
        scannedResult=[]
        for proto in nm[host].all_protocols():
            lport = nm[host][proto].keys()
            sorted(lport)
            for port in lport:
                scannedResult.append({"Port":port,"State":(nm[host][proto][port]['state']),"Name":(nm[host][proto][port]['name'])})   
    return [scannedResult,len(scannedResult),portRange]


def home(request):
    targetedIPAddress = getLocalIp()
    deviceOS = platform.system()
    return render(request, 'home.html',{'targetedIPAddress':targetedIPAddress,'deviceOS':deviceOS})


def result(request):
    
    if request.GET.get('ScanPorts') == "":
        scannedResults = scanOpenedPorts()
        ipAddress = getLocalIp()
        deviceOS = platform.system()
        return render(request,'result.html',{"scannedResults":scannedResults[0],"numPorts":range(scannedResults[1]),'ipAddress':ipAddress,'deviceOS':deviceOS,"totalOpenFilterPorts":scannedResults[1],"portRange":scannedResults[2]})    

def viewResult(request):
    if request.GET.get('ViewResult') =="":
        scannedResults = []
        ipAddress = getLocalIp()
        deviceOS = platform.system()
        with open('scannedResults.json','r') as jsonFile:
            scannedJson = json.load(jsonFile)
            scannedIPAddress = scannedJson['scan'][ipAddress]['addresses']['ipv4']
            scannedPorts = scannedJson['scan'][ipAddress]['tcp']
            scannedTotalPortsRange = scannedJson['nmap']['scaninfo']['tcp']['services']
            scannedTimeStamp = scannedJson['nmap']['scanstats']['timestr']
            scannedTimeUsed =  scannedJson['nmap']['scanstats']['elapsed']
            sorted(scannedPorts)
            for port, port_info in scannedPorts.items():
                port_number = int(port)
                port_state = port_info.get('state')
                port_name = port_info.get('name')
                
                scannedResults.append({"Port":port_number,"State":port_state,"Name":port_name})   
                # print(f"Port: {port_number}, State: {port_state}, Name: {port_name}")

        return render(request, 'viewResult.html',{"scannedResults":scannedResults,"numPorts":range(len(scannedResults)),"ipAddress":scannedIPAddress,"deviceOS":deviceOS,"totalOpenFilterPorts":len(scannedPorts),"scannedTimeStamp":scannedTimeStamp,"scannedTimeUsed":scannedTimeUsed,"scannedTotalPortsRange":scannedTotalPortsRange})


# Return device's hostname
def getHostname(ipAddress):
    try:
        hostname = socket.gethostbyaddr(ipAddress)[0]
        return hostname
    except socket.herror:
        return "No domain name found"



# Reading Database and Return a list of executive information list
def readingDatabse(scannedResults):
    executiveReportList = []
    with open('portDatabase.csv','r') as databaseFile:
        databaseList = list(csv.reader(databaseFile,delimiter=','))
        databaseFile.close()

        for port in scannedResults:
            targetPort = port["Port"]
            
            for databasePort in databaseList:
                if (int(databasePort[0])==targetPort):
                    executiveReportList.append(databasePort)
                    break
            else:
                print("Nothing matched.")
    return executiveReportList


def viewReport(request):
    if request.GET.get('CreateReport') == "":
        scannedResults = []
        
        ipAddress = getLocalIp()
        deviceOS = platform.system()
        with open('scannedResults.json','r') as jsonFile:
            scannedJson = json.load(jsonFile)
            scannedIPAddress = scannedJson['scan'][ipAddress]['addresses']['ipv4']
            scannedPorts = scannedJson['scan'][ipAddress]['tcp']
            scannedTotalPortsRange = scannedJson['nmap']['scaninfo']['tcp']['services']
            scannedTimeStamp = scannedJson['nmap']['scanstats']['timestr']
            scannedTimeUsed =  scannedJson['nmap']['scanstats']['elapsed']
            sorted(scannedPorts)
            for port, port_info in scannedPorts.items():
                port_number = int(port)
                port_state = port_info.get('state')
                port_name = port_info.get('name')
                
                scannedResults.append({"Port":port_number,"State":port_state,"Name":port_name})   
        executiveReportList = readingDatabse(scannedResults)
        deviceHostname = getHostname(ipAddress=ipAddress)
        
    return render(request, "viewReport.html",
    {
        "totalVulnerabilities":len(executiveReportList),
        "deviceHostname":deviceHostname,
        "executiveReportList":executiveReportList,
        "scannedResults":scannedResults,
        "numPorts":range(len(scannedResults)),
        "ipAddress":scannedIPAddress,
        "deviceOS":deviceOS,
        "totalOpenFilterPorts":len(scannedPorts),
        "scannedTimeStamp":scannedTimeStamp,
        "scannedTimeUsed":scannedTimeUsed,
        "scannedTotalPortsRange":scannedTotalPortsRange})